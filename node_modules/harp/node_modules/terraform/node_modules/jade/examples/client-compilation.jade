//-
  You can serve this file using a simple Express.js server
  examples/client-compilation.js.

doctype html
html
  head
    title Jade compilation demo
    style.
      * {
        box-sizing: border-box;
      }
      iframe, pre, textarea {
        height: auto;
        border: 1px solid #a9a9a9;
        width: 100%;
        max-height: 600px;
        min-height: 120px;
      }
      /* Preformatted <textarea> */
      textarea.pre {
        font-family: monospace;
        font-size: 1em;
      }
      pre {
        padding: 2px;
        overflow: auto;
        width: auto;
      }
      /* Prettier button (half-)stolen from Bootstrap */
      button {
        padding: 8px 16px;
        font-size: 19px;
        border: 1px solid transparent;
        border-radius: 5px;
        background-color: #fff;
        border-color: #ccc;
        cursor: pointer;
      }
      button:hover,
      button:focus,
      button:active {
        color: #333;
        background-color: #e6e6e6;
        border-color: #adadad;
      }

  body
    h1
      | Client Compilation Example&nbsp;
      button(type='submit', onclick='comp()') Submit

    p.
      This example shows how to compile and render Jade templates in the
      browser.
    p.
      Note that although it is supported, we do not #[em recommend] compiling
      in the browser; rather, you should pre-compile the template using
      #[code jade.compileClient] or #[code jade.compileFileClient].

    h2 Input template
    textarea#input.pre(rows='8').
      doctype html

      html
        body
          p I love you.
          p: small From \#[em= name].

    h2 Compilation options (JSON)
    textarea#options.pre(rows='8').
      {
        "pretty": true
      }

    h2 Locals (JSON)
    textarea#locals.pre(rows='8').
      {
        "name": "Timothy"
      }

    h2 Raw HTML
    pre#output

    h2 Rendered HTML
    iframe#output-html

    script(src='jade.js')
    script.
      comp();

      // Handle compilation and injection of Jade scripts
      function comp() {
        // Get the elements
        var // input Jade template
            templ   = document.getElementById('input')
            // JSON locals
          , locals  = document.getElementById('locals')
            // JSON options
          , options = document.getElementById('options')
            // output text area
          , output  = document.getElementById('output')
            // rendered HTML
          , html    = document.getElementById('output-html')
          , fn;

        // Handle errors by catching it, print the message to the output HTML
        // box, and throwing it again so that it's visible on the JS console.
        // `stage` sets the corresponding error context.
        function handleError(func, stage) {
          try {
            // Try executing callback
            func();
          } catch (e) {
            // If there is an exception:
            // 1. Change output heading to "Error when ..."
            outputTitle.innerHTML = 'Error ' + stage;
            // 2. Put the stack trace into the output text area
            output.textContent = e.stack || e.message || e.toString();
            // 3. Rethrow it
            throw e;
          }
        }

        // Parse options as JSON
        handleError(function () {
          options = JSON.parse(options.value || '{}');
        }, 'when parsing options');

        // Parse locals as JSON
        handleError(function () {
          locals = JSON.parse(locals.value || '{}');
        }, 'when parsing locals');

        // Compile template with specified template and options
        handleError(function () {
          fn = jade.compile(templ.value, options);
        }, 'when compiling');

        // Put the rendered HTML into the text area
        handleError(function () {
          output.textContent = fn(locals);
          html.srcdoc = fn(locals);
        }, 'when executing template function');
      }
