extends ../reference.jade

block documentation
  h1 Attributes

  p Tag attributes look similar to html, however their values are just regular JavaScript.

  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          a(href='google.com') Google
          a(class='button', href='google.com') Google
    .col-lg-6
      +html
        :htmlsrc
          <a href="google.com">Google</a><a class="button" href="google.com">Google</a>

  p All the normal JavaScript expressions work fine too:

  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          - var authenticated = true
          body(class=authenticated ? 'authed' : 'anon')
    .col-lg-6
      +html
        :htmlsrc
          <body class="authed"></body>

  p If you have many attributes, you can also spread them across many lines:

  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          input(
            type='checkbox'
            name='agreement'
            checked
          )
    .col-lg-6
      +html
        :htmlsrc
          <input type="checkbox" name="agreement" checked="checked" />

  h2#unescaped Unescaped Attributes

  p By default, all attributes are escaped (replacing special characters with escape sequences) to prevent attacks such as cross site scripting.  If you need to use special characters you can use #[code !=] instead of #[code =].

  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          div(escaped="<code>")
          div(unescaped!="<code>")
    .col-lg-6
      +html
        :htmlsrc
          <div escaped="&lt;code&gt;"></div>
          <div unescaped="<code>"></div>

  .panel.panel-danger
    .panel-heading Danger
    .panel-body
      p.
        Unescaped buffered code can be dangerous.
        You must be sure to sanitize any user inputs to avoid
        #[a(href='https://en.wikipedia.org/wiki/Cross-site_scripting') cross-site scripting].

  h2#booleanattribs Boolean Attributes

  p Boolean attributes are mirrored by Jade, and accept bools, aka #[code true] or #[code false]. When no value is specified true is assumed.

  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          input(type='checkbox', checked)
          input(type='checkbox', checked=true)
          input(type='checkbox', checked=false)
          input(type='checkbox', checked=true.toString())
    .col-lg-6
      +html
        :htmlsrc
          <input type="checkbox" checked="checked" />
          <input type="checkbox" checked="checked" />
          <input type="checkbox" />
          <input type="checkbox" checked="true" />

  p If the doctype is #[code html] jade knows not to mirror the attribute and uses the terse style (understood by all browsers).

  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          doctype html
          input(type='checkbox', checked)
          input(type='checkbox', checked=true)
          input(type='checkbox', checked=false)
          input(type='checkbox', checked=true && 'checked')
    .col-lg-6
      +html
        :htmlsrc
          <!DOCTYPE html>
          <input type="checkbox" checked>
          <input type="checkbox" checked>
          <input type="checkbox">
          <input type="checkbox" checked="checked">

  h2 Style Attributes

  p The #[code style] attribute can be a string (like any normal attribute) but it can also be an object, which is handy when parts of the style are generated by JavaScript.


  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          a(style={color: 'red', background: 'green'})
    .col-lg-6
      +html
        :htmlsrc
          <a style="color:red;background:green"></a>

  h2 Class Attributes

  p The <code>class</code> attribute can be a string (like any normal attribute) but it can also be an array of class names, which is handy when generated from JavaScript.

  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          - var classes = ['foo', 'bar', 'baz']
          a(class=classes)
          //- the class attribute may also be repeated to merge arrays
          a.bing(class=classes class=['bing'])
    .col-lg-6
      +html
        :htmlsrc
          <a class="foo bar baz"></a><a class="foo bar baz bing"></a>

  p It can also be an object mapping class names to true or false values, which is useful for applying conditional classes

  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          - var currentUrl = '/about'
          a(class={active: currentUrl === '/'} href='/') Home
          a(class={active: currentUrl === '/about'} href='/about') About
    .col-lg-6
      +html
        :htmlsrc
          <a href="/">Home</a><a href="/about" class="active">About</a>

  h2 Class Literal

  p Classes may be defined using a #[code .classname] syntax:


  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          a.button
    .col-lg-6
      +html
        :htmlsrc
          <a class="button"></a>

  p Since div's are such a common choice of tag, it is the default if you omit the tag name:

  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          .content
    .col-lg-6
      +html
        :htmlsrc
          <div class="content"></div>

  h2 ID Literal

  p IDs may be defined using a <code>#idname</code> syntax:

  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          a#main-link
    .col-lg-6
      +html
        :htmlsrc
          <a id="main-link"></a>

  p Since div's are such a common choice of tag, it is the default if you omit the tag name:

  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          #content
    .col-lg-6
      +html
        :htmlsrc
          <div id="content"></div>

  h2#and-attributes &amp;attributes

  p Pronounced "and attributes", the #[code &amp;attributes] syntax can be used to explode an object into attributes of an element.

  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          div#foo(data-bar="foo")&attributes({'data-foo': 'bar'})
    .col-lg-6
      +html
        :htmlsrc
          <div id="foo" data-bar="foo" data-foo="bar"></div>

  p The object does not have to be an object literal. It can also just be a variable that has an object as its value (see also #[a(href="/reference/mixins#attributes") Mixin Attributes])

  .row(data-control='interactive')
    .col-lg-6
      +jade
        :jadesrc
          - var attributes = {'data-foo': 'bar'};
          div#foo(data-bar="foo")&attributes(attributes)
    .col-lg-6
      +html
        :htmlsrc
          <div id="foo" data-bar="foo" data-foo="bar"></div>
  .panel.panel-danger
    .panel-heading Danger
    .panel-body
      p.
        Attributes applied using #[code &amp;attributes] are not automatically escaped.
        You must be sure to sanitize any user inputs to avoid
        #[a(href='https://en.wikipedia.org/wiki/Cross-site_scripting') cross-site scripting].
        This is done for you if you are passing in #[code attributes] from a mixin call.
