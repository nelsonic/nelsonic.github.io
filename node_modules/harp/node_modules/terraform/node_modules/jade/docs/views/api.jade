extends ./layout.jade

block content
  h1 API Documentation

  p This page details how to render jade using the JavaScript API in node.js

  h2 Installation

  p via npm:

  pre
    code npm install jade

  h2 Usage

  h3 options

  p All API methods take the following set of options:

  .code
    div {
    dl.parameter-list
      dt filename:
      dd.type.string string
      dd.description Used in exceptions, and required for relative includes and extends
      dt doctype:
      dd.type.string string
      dd.description If the doctype is not specified as part of the template, you can specify it here.  It is sometimes useful to get self-closing tags and remove mirroring of boolean attributes.
      dt pretty:
      dd.type boolean | string
      dd.description Adds whitespace to the resulting html to make it easier for a human to read using #[code '&nbsp;&nbsp;'] as indentation. If a string is specified, that will be used as indentation instead (e.g. #[code '\t']).
      dt self:
      dd.type.boolean boolean
      dd.description Use a #[code self] namespace to hold the locals (false by default)
      dt debug:
      dd.type.boolean boolean
      dd.description If set to true, the tokens and function body is logged to stdout
      dt compileDebug:
      dd.type.boolean boolean
      dd.description Set this to false to disable debugging instrumentation (recommended in production).  Set it to true to include the function source in the compiled template for better error messages (sometimes useful in development).
      dt cache:
      dd.type.boolean boolean
      dd.description If set to true, compiled functions are cached. #[code filename] must be set as the cache key.
      dt compiler:
      dd.type.function class
      dd.description Override the default compiler
      dt parser:
      dd.type.function class
      dd.description Override the default parser
      dt globals:
      dd.type.array= 'Array.<string>'
      dd.description Add a list of global names to make accessible in templates
    div }

  h3 jade.compile(source, options)

  p Compile some jade source to a function which can be rendered multiple times with different locals.

  dl.parameter-list
    dt source
    dd.type.string string
    dd.description The source jade to compile
    dt options
    dd.type.object options
    dd.description An options object (see above)
  dl.returns
    dt returns
    dd.type.function function
    dd.description A function to generate the html from an object containing locals

  +js
    :jssrc
      var jade = require('jade');

      // Compile a function
      var fn = jade.compile('string of jade', options);

      // Render the function
      var html = fn(locals);
      // => '<string>of jade</string>'

  h3 jade.compileFile(path, options)

  p Compile some jade source from a file to a function which can be rendered multiple times with different locals.

  dl.parameter-list
    dt source
    dd.type.string path
    dd.description The path to a jade file
    dt options
    dd.type.object options
    dd.description An options object (see above)
  dl.returns
    dt returns
    dd.type.function function
    dd.description A function to generate the html from an object containing locals

  +js
    :jssrc
      var jade = require('jade');

      // Compile a function
      var fn = jade.compileFile('path to jade file', options);

      // Render the function
      var html = fn(locals);
      // => '<string>of jade</string>'

  h3 jade.compileClient(source, options)

  p Compile some jade source to a string of JavaScript that can be used client side along with the jade runtime.

  dl.parameter-list
    dt source
    dd.type.string string
    dd.description The source jade to compile
    dt options
    dd.type.object options
    dd.description An options object (see above)
  dl.returns
    dt returns
    dd.type.string string
    dd.description A string of JavaScript representing a function

  +js
    :jssrc
      var jade = require('jade');

      // Compile a function
      var fn = jade.compileClient('string of jade', options);

      // Render the function
      var html = fn(locals);
      // => 'function template(locals) { return "<string>of jade</string>"; }'
  
  h3 jade.compileClientWithDependenciesTracked(source, options)
  
  p See #[code jade.compileClient] except that this method returns an object of the form:
  
  +js
    :jssrc
      {
        'body': 'function (locals) {...}',
        'dependencies': ['filename.jade']
      }

  p.
    You should only use this method if you need to implement something
    like watching for changes to the jade files.

  h3 jade.compileFileClient(path, options)

  p Compile a jade template file to a string of Javascript that can be used client side along with the jade runtime.

  dl.parameter-list
    dt path
    dd.type.string string
    dd.description The path to a jade file
    dt options
    dd.type.object options
    dd.description An options object (see above)
    dt options.name
    dd.type.string string
    dd.description.
      If you pass a #[code .name] property on the options object, it will be
      used as the function name for your client side template function.
  dl.returns
    dt returns
    dd.type.string string
    dd.description A Javascript function body.

  p First, our template file.

  +jade
    :jadesrc
      h1 This is a Jade template
      h2 By \#{author}

  p Then, we compile the jade file into a function string.

  +js
    :jssrc
      var fs   = require('fs');
      var jade = require('jade');

      // Compile the template to a function string
      var jsFunctionString = jade.compileFileClient('/path/to/jadeFile.jade', {name: "fancyTemplateFun"});

      // Maybe you want to compile all of your templates to a templates.js file and serve it to the client
      fs.writeFileSync("templates.js", jsFunctionString);

  p Here's what the output function string looks like (written to #[code templates.js]).

  +js
    :jssrc
      function fancyTemplateFun(locals) {
        var buf = [];
        var jade_mixins = {};
        var jade_interp;

        var locals_for_with = (locals || {});

        (function (author) {
          buf.push("<h1>This is a Jade template</h1><h2>By "
            + (jade.escape((jade_interp = author) == null ? '' : jade_interp))
            + "</h2>");
        }.call(this, "author" in locals_for_with ?
          locals_for_with.author : typeof author !== "undefined" ?
            author : undefined)
        );

        return buf.join("");
      }


  p.
    Be sure to send the Jade runtime (#[code node_modules/jade/runtime.js]) to
    the client in addition to the template that you just compiled.

  +html
    :htmlsrc
      <!DOCTYPE html>
      <html>
        <head>
          <script src="/runtime.js"></script>
          <script src="/templates.js"></script>
        </head>

        <body>
          <h1>This is one fancy template.</h1>

          <script type="text/javascript">
            var html = window.fancyTemplateFun({author: "enlore"});
            var div = document.createElement("div");
            div.innerHTML = html;
            document.body.appendChild(div);
          </script>
        </body>
      </html>

  h3 jade.render(source, options)

  dl.parameter-list
    dt source
    dd.type.string string
    dd.description The source jade to render
    dt options
    dd.type.object options
    dd.description An options object (see above), also used as the locals object
  dl.returns
    dt returns
    dd.type.string string
    dd.description The resulting html string

  +js
    :jssrc
      var jade = require('jade');

      var html = jade.render('string of jade', options);
      // => '<string>of jade</string>'

  h3 jade.renderFile(filename, options)

  dl.parameter-list
    dt filename
    dd.type.string string
    dd.description The path to the jade file to render
    dt options
    dd.type.object options
    dd.description An options object (see above), also used as the locals object
  dl.returns
    dt returns
    dd.type.string string
    dd.description The resulting html string

  +js
    :jssrc
      var jade = require('jade');

      var html = jade.renderFile('path/to/file.jade', options);
      // ...
